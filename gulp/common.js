"use strict";

var gulpConfig = require(__dirname + "/config.json"),
	argv = require("yargs").argv,
	PrettyError = require("pretty-error"),
	appConfig = require(__dirname + "/../config.js"),
	bower = require("bower");

var src = gulpConfig.folderSettings.src;
var dist = appConfig.webserver.staticDir;

var config = {
	//Paths
	src: src,
	dist: dist,
	concatSrcCSSFile: gulpConfig.filenameSettings.concatSrcCSSFile,
	concatVendorCSSFile: gulpConfig.filenameSettings.concatVendorCSSFile,
	concatSrcJsFile: gulpConfig.filenameSettings.concatSrcJsFile,
	concatVendorJsFile: gulpConfig.filenameSettings.concatVendorJsFile,
	prefixBrowsers: gulpConfig.browserSettings.supportedBrowsers,

	bowerComponents: bower.config.directory,

	//Misc
	production: Boolean(argv.production),
	debug: Boolean(argv.debug),
	onError: function(error) {
		var pe = new PrettyError();
		pe.skipNodeFiles();
		console.log(pe.render(error));
	},
	srcUglifyConfig: {
		mangle: true,
		preserveComments: "none",
		output: {
			beautify: false
		}
	},
	vendorUglifyConfig: {
		mangle: true,
		preserveComments: "some",
		output: {
			beautify: false
		}
	},
	copyrightBanner: [
		"@copyright <%= packageFile.author %> <%= d.getFullYear() %> - <%= packageFile.description %>",
		"@version v<%= packageFile.version %>",
		"@link <%= packageFile.homepage %>",
		"@license <%= packageFile.license %>",
		"@revision <%= gitRev %>"
	],
	packageFile: require("../package.json"),
	jsPolyfillsFile: gulpConfig.filenameSettings.jsPolyfillsFile,
	tests: gulpConfig.tests
};

var subFolders = gulpConfig.folderSettings.subFolders;
for(var folderType in subFolders){
	if(subFolders.hasOwnProperty(folderType)){
		config[folderType + "Dist"] = dist + "/" + subFolders[folderType];
		config[folderType + "Src"] = src + "/" + subFolders[folderType];
	}
}

for(var fileType in gulpConfig.fileTypes){
	if(gulpConfig.fileTypes.hasOwnProperty(fileType)){
		var types = gulpConfig.fileTypes[fileType];
		var brace = types.join(",");
		if(types.length > 1){
			brace = "{" + brace + "}";
		}
		config[fileType + "Glob"] = "/**/*." + brace;
		config[fileType + "Regex"] = new RegExp("\\.(?:" + types.join("|") + ")$","i");
		config[fileType + "Types"] = types;
		if(subFolders.hasOwnProperty(fileType)){
			config[fileType + "DistGlob"] = config[fileType + "Dist"] + config[fileType + "Glob"];
			config[fileType + "SrcGlob"] = config[fileType + "Src"] + config[fileType + "Glob"];
		} else {
			config[fileType + "DistGlob"] = dist + config[fileType + "Glob"];
			config[fileType + "SrcGlob"] = src + config[fileType + "Glob"];
		}
	}
}

//This can't be autogenerated because that would (for example) exclude fonts
//Which don't currently have a separate processing task and need to be part
//of copy:files (and it's associated watch)
config.otherFilesSrc = [
	config.src + "/**/*",
	"!" + config.imagesSrcGlob,
	"!" + config.pagesSrcGlob,
	"!" + config.scriptsSrcGlob,
	"!" + config.stylesSrcGlob
];

module.exports = config;
